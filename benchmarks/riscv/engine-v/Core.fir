;buildInfoPackage: chisel3, version: 3.5-SNAPSHOT, scalaVersion: 2.12.13, sbtVersion: 1.5.4
circuit Core : 
  module addsub8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip a : UInt<8>, flip b : UInt<8>, q : UInt<8>, flip sub : UInt<1>, flip cin : UInt<1>, cout : UInt<1>}
    
    node _b_T = not(io.b) @[Alu.scala 122:32]
    node b = mux(io.sub, _b_T, io.b) @[Alu.scala 122:23]
    node _res_T = add(io.a, b) @[Alu.scala 123:21]
    node _res_T_1 = add(_res_T, io.cin) @[Alu.scala 123:27]
    node res = tail(_res_T_1, 1) @[Alu.scala 123:27]
    node _io_q_T = bits(res, 7, 0) @[Alu.scala 124:16]
    io.q <= _io_q_T @[Alu.scala 124:10]
    node _io_cout_T = bits(res, 8, 8) @[Alu.scala 125:19]
    io.cout <= _io_cout_T @[Alu.scala 125:13]
    
  module Alu : 
    input clock : Clock
    input reset : Reset
    output io : {flip ROM_Data : UInt<16>, flip ROM_Pattern : UInt<8>, flip A : UInt<8>, flip B : UInt<8>, Q : UInt<8>, flip SREG : UInt<2>, flip PassB : UInt<1>, flip Skip : UInt<1>, Do_Other : UInt<1>, Z_Skip : UInt<1>, Status_D : UInt<7>, Status_Wr : UInt<7>}
    
    node _is_sbc_T = bits(io.ROM_Data, 15, 10) @[Alu.scala 24:29]
    node is_sbc = eq(_is_sbc_T, UInt<2>("h02")) @[Alu.scala 24:37]
    node _is_add_T = bits(io.ROM_Data, 15, 10) @[Alu.scala 25:29]
    node is_add = eq(_is_add_T, UInt<2>("h03")) @[Alu.scala 25:37]
    node _is_sub_T = bits(io.ROM_Data, 15, 10) @[Alu.scala 26:29]
    node is_sub = eq(_is_sub_T, UInt<3>("h06")) @[Alu.scala 26:37]
    node _is_adc_T = bits(io.ROM_Data, 15, 10) @[Alu.scala 27:29]
    node is_adc = eq(_is_adc_T, UInt<3>("h07")) @[Alu.scala 27:37]
    node _is_and_T = bits(io.ROM_Data, 15, 10) @[Alu.scala 28:29]
    node is_and = eq(_is_and_T, UInt<4>("h08")) @[Alu.scala 28:37]
    node _is_xor_T = bits(io.ROM_Data, 15, 10) @[Alu.scala 29:29]
    node is_xor = eq(_is_xor_T, UInt<4>("h09")) @[Alu.scala 29:37]
    node _is_or_T = bits(io.ROM_Data, 15, 10) @[Alu.scala 30:29]
    node is_or = eq(_is_or_T, UInt<4>("h0a")) @[Alu.scala 30:37]
    node _is_mov_T = bits(io.ROM_Data, 15, 10) @[Alu.scala 31:29]
    node is_mov = eq(_is_mov_T, UInt<4>("h0b")) @[Alu.scala 31:37]
    node _is_imm_sub_T = bits(io.ROM_Data, 15, 12) @[Alu.scala 32:33]
    node is_imm_sub = eq(_is_imm_sub_T, UInt<3>("h05")) @[Alu.scala 32:41]
    node _is_imm_or_T = bits(io.ROM_Data, 15, 12) @[Alu.scala 33:33]
    node is_imm_or = eq(_is_imm_or_T, UInt<3>("h06")) @[Alu.scala 33:41]
    node _is_imm_and_T = bits(io.ROM_Data, 15, 12) @[Alu.scala 34:33]
    node is_imm_and = eq(_is_imm_and_T, UInt<3>("h07")) @[Alu.scala 34:41]
    node _is_io_T = bits(io.ROM_Data, 15, 12) @[Alu.scala 35:33]
    node is_io = eq(_is_io_T, UInt<4>("h0b")) @[Alu.scala 35:41]
    node _is_ldi_T = bits(io.ROM_Data, 15, 12) @[Alu.scala 36:33]
    node is_ldi = eq(_is_ldi_T, UInt<4>("h0e")) @[Alu.scala 36:41]
    node _is_uop_T = bits(io.ROM_Data, 15, 9) @[Alu.scala 37:33]
    node is_uop = eq(_is_uop_T, UInt<7>("h04a")) @[Alu.scala 37:40]
    node _maybe_swap_T = bits(io.ROM_Data, 3, 0) @[Alu.scala 38:33]
    node maybe_swap = eq(_maybe_swap_T, UInt<2>("h02")) @[Alu.scala 38:39]
    node _maybe_asr_T = bits(io.ROM_Data, 3, 0) @[Alu.scala 39:33]
    node maybe_asr = eq(_maybe_asr_T, UInt<3>("h05")) @[Alu.scala 39:39]
    node _maybe_lsr_T = bits(io.ROM_Data, 3, 0) @[Alu.scala 40:33]
    node maybe_lsr = eq(_maybe_lsr_T, UInt<3>("h06")) @[Alu.scala 40:39]
    node _maybe_ror_T = bits(io.ROM_Data, 3, 0) @[Alu.scala 41:33]
    node maybe_ror = eq(_maybe_ror_T, UInt<3>("h07")) @[Alu.scala 41:39]
    node _Do_DO_T = eq(io.PassB, UInt<1>("h00")) @[Alu.scala 45:17]
    node _Do_DO_T_1 = eq(io.Skip, UInt<1>("h00")) @[Alu.scala 45:30]
    node Do_DO = and(_Do_DO_T, _Do_DO_T_1) @[Alu.scala 45:27]
    node _Do_SUB_T = or(is_sub, is_imm_sub) @[Alu.scala 46:43]
    node _Do_SUB_T_1 = or(_Do_SUB_T, is_sbc) @[Alu.scala 46:57]
    node _Do_SUB_T_2 = and(Do_DO, _Do_SUB_T_1) @[Alu.scala 46:32]
    reg Do_SUB : UInt<1>, clock @[Alu.scala 46:25]
    Do_SUB <= _Do_SUB_T_2 @[Alu.scala 46:25]
    node _Do_ADD_T = or(is_add, is_adc) @[Alu.scala 47:43]
    node _Do_ADD_T_1 = and(Do_DO, _Do_ADD_T) @[Alu.scala 47:32]
    reg Do_ADD : UInt<1>, clock @[Alu.scala 47:25]
    Do_ADD <= _Do_ADD_T_1 @[Alu.scala 47:25]
    node _Use_Carry_T = or(is_sbc, is_adc) @[Alu.scala 48:46]
    node _Use_Carry_T_1 = and(Do_DO, _Use_Carry_T) @[Alu.scala 48:35]
    reg Use_Carry : UInt<1>, clock @[Alu.scala 48:28]
    Use_Carry <= _Use_Carry_T_1 @[Alu.scala 48:28]
    node _Do_AND_T = or(is_and, is_imm_and) @[Alu.scala 49:43]
    node _Do_AND_T_1 = and(Do_DO, _Do_AND_T) @[Alu.scala 49:32]
    reg Do_AND : UInt<1>, clock @[Alu.scala 49:25]
    Do_AND <= _Do_AND_T_1 @[Alu.scala 49:25]
    node _Do_XOR_T = and(Do_DO, is_xor) @[Alu.scala 50:32]
    reg Do_XOR : UInt<1>, clock @[Alu.scala 50:25]
    Do_XOR <= _Do_XOR_T @[Alu.scala 50:25]
    node _Do_OR_T = or(is_or, is_imm_or) @[Alu.scala 51:42]
    node _Do_OR_T_1 = and(Do_DO, _Do_OR_T) @[Alu.scala 51:32]
    reg Do_OR : UInt<1>, clock @[Alu.scala 51:25]
    Do_OR <= _Do_OR_T_1 @[Alu.scala 51:25]
    node _Do_SWAP_T = and(is_uop, maybe_swap) @[Alu.scala 52:44]
    node _Do_SWAP_T_1 = and(Do_DO, _Do_SWAP_T) @[Alu.scala 52:33]
    reg Do_SWAP : UInt<1>, clock @[Alu.scala 52:26]
    Do_SWAP <= _Do_SWAP_T_1 @[Alu.scala 52:26]
    node _Do_ASR_T = and(is_uop, maybe_asr) @[Alu.scala 53:44]
    node _Do_ASR_T_1 = and(Do_DO, _Do_ASR_T) @[Alu.scala 53:33]
    reg Do_ASR : UInt<1>, clock @[Alu.scala 53:26]
    Do_ASR <= _Do_ASR_T_1 @[Alu.scala 53:26]
    node _Do_LSR_T = and(is_uop, maybe_lsr) @[Alu.scala 54:44]
    node _Do_LSR_T_1 = and(Do_DO, _Do_LSR_T) @[Alu.scala 54:33]
    reg Do_LSR : UInt<1>, clock @[Alu.scala 54:26]
    Do_LSR <= _Do_LSR_T_1 @[Alu.scala 54:26]
    node _Do_ROR_T = and(is_uop, maybe_ror) @[Alu.scala 55:44]
    node _Do_ROR_T_1 = and(Do_DO, _Do_ROR_T) @[Alu.scala 55:33]
    reg Do_ROR : UInt<1>, clock @[Alu.scala 55:26]
    Do_ROR <= _Do_ROR_T_1 @[Alu.scala 55:26]
    node _Do_PASSB_T = eq(io.Skip, UInt<1>("h00")) @[Alu.scala 56:41]
    node _Do_PASSB_T_1 = or(is_mov, is_io) @[Alu.scala 56:61]
    node _Do_PASSB_T_2 = or(_Do_PASSB_T_1, is_ldi) @[Alu.scala 56:70]
    node _Do_PASSB_T_3 = and(_Do_PASSB_T, _Do_PASSB_T_2) @[Alu.scala 56:50]
    node _Do_PASSB_T_4 = or(io.PassB, _Do_PASSB_T_3) @[Alu.scala 56:37]
    reg Do_PASSB : UInt<1>, clock @[Alu.scala 56:27]
    Do_PASSB <= _Do_PASSB_T_4 @[Alu.scala 56:27]
    node _Do_SBRC_T = bits(io.ROM_Data, 15, 9) @[Alu.scala 57:48]
    node _Do_SBRC_T_1 = eq(_Do_SBRC_T, UInt<7>("h07e")) @[Alu.scala 57:56]
    node _Do_SBRC_T_2 = and(Do_DO, _Do_SBRC_T_1) @[Alu.scala 57:33]
    reg Do_SBRC : UInt<1>, clock @[Alu.scala 57:26]
    Do_SBRC <= _Do_SBRC_T_2 @[Alu.scala 57:26]
    node _Do_SBRS_T = bits(io.ROM_Data, 15, 9) @[Alu.scala 58:48]
    node _Do_SBRS_T_1 = eq(_Do_SBRS_T, UInt<7>("h07f")) @[Alu.scala 58:56]
    node _Do_SBRS_T_2 = and(Do_DO, _Do_SBRS_T_1) @[Alu.scala 58:33]
    reg Do_SBRS : UInt<1>, clock @[Alu.scala 58:26]
    Do_SBRS <= _Do_SBRS_T_2 @[Alu.scala 58:26]
    inst addsub_inst of addsub8 @[Alu.scala 62:29]
    addsub_inst.clock <= clock
    addsub_inst.reset <= reset
    addsub_inst.io.a <= io.A @[Alu.scala 63:22]
    addsub_inst.io.b <= io.B @[Alu.scala 64:22]
    addsub_inst.io.sub <= Do_SUB @[Alu.scala 65:24]
    node _addsub_inst_io_cin_T = bits(io.SREG, 0, 0) @[Alu.scala 66:55]
    node _addsub_inst_io_cin_T_1 = and(Use_Carry, _addsub_inst_io_cin_T) @[Alu.scala 66:46]
    node _addsub_inst_io_cin_T_2 = xor(Do_SUB, _addsub_inst_io_cin_T_1) @[Alu.scala 66:34]
    addsub_inst.io.cin <= _addsub_inst_io_cin_T_2 @[Alu.scala 66:24]
    io.Do_Other <= Do_PASSB @[Alu.scala 69:17]
    node _T = or(Do_ADD, Do_SUB) @[Alu.scala 70:17]
    when _T : @[Alu.scala 70:28]
      io.Q <= addsub_inst.io.q @[Alu.scala 71:14]
      skip @[Alu.scala 70:28]
    else : @[Alu.scala 72:25]
      when Do_AND : @[Alu.scala 72:25]
        node _io_Q_T = and(io.A, io.B) @[Alu.scala 73:22]
        io.Q <= _io_Q_T @[Alu.scala 73:14]
        skip @[Alu.scala 72:25]
      else : @[Alu.scala 74:24]
        when Do_OR : @[Alu.scala 74:24]
          node _io_Q_T_1 = or(io.A, io.B) @[Alu.scala 75:22]
          io.Q <= _io_Q_T_1 @[Alu.scala 75:14]
          skip @[Alu.scala 74:24]
        else : @[Alu.scala 76:25]
          when Do_XOR : @[Alu.scala 76:25]
            node _io_Q_T_2 = xor(io.A, io.B) @[Alu.scala 77:22]
            io.Q <= _io_Q_T_2 @[Alu.scala 77:14]
            skip @[Alu.scala 76:25]
          else : @[Alu.scala 78:26]
            when Do_SWAP : @[Alu.scala 78:26]
              node io_Q_hi = bits(io.A, 3, 0) @[Alu.scala 79:25]
              node io_Q_lo = bits(io.A, 7, 4) @[Alu.scala 79:36]
              node _io_Q_T_3 = cat(io_Q_hi, io_Q_lo) @[Cat.scala 30:58]
              io.Q <= _io_Q_T_3 @[Alu.scala 79:14]
              skip @[Alu.scala 78:26]
            else : @[Alu.scala 80:18]
              node _msb_T = bits(io.A, 7, 7) @[Alu.scala 81:23]
              node _msb_T_1 = and(_msb_T, Do_ASR) @[Alu.scala 81:27]
              node _msb_T_2 = bits(io.SREG, 0, 0) @[Alu.scala 81:45]
              node _msb_T_3 = and(_msb_T_2, Do_ROR) @[Alu.scala 81:49]
              node io_Q_hi_1 = or(_msb_T_1, _msb_T_3) @[Alu.scala 81:36]
              node io_Q_lo_1 = bits(io.A, 7, 1) @[Alu.scala 82:30]
              node _io_Q_T_4 = cat(io_Q_hi_1, io_Q_lo_1) @[Cat.scala 30:58]
              io.Q <= _io_Q_T_4 @[Alu.scala 82:14]
              skip @[Alu.scala 80:18]
    node _is_zero_T = bits(io.Q, 7, 0) @[Alu.scala 86:24]
    node is_zero = eq(_is_zero_T, UInt<1>("h00")) @[Alu.scala 86:31]
    wire d1 : UInt<1> @[Alu.scala 87:18]
    node _T_1 = eq(Do_SUB, UInt<1>("h00")) @[Alu.scala 88:22]
    node _T_2 = eq(Use_Carry, UInt<1>("h00")) @[Alu.scala 88:33]
    node _T_3 = or(_T_1, _T_2) @[Alu.scala 88:30]
    node _T_4 = and(is_zero, _T_3) @[Alu.scala 88:18]
    when _T_4 : @[Alu.scala 88:46]
      d1 <= UInt<1>("h01") @[Alu.scala 89:12]
      skip @[Alu.scala 88:46]
    else : @[Alu.scala 90:49]
      node _T_5 = and(is_zero, Do_SUB) @[Alu.scala 90:25]
      node _T_6 = and(_T_5, Use_Carry) @[Alu.scala 90:35]
      when _T_6 : @[Alu.scala 90:49]
        node _d1_T = bits(io.SREG, 1, 1) @[Alu.scala 91:22]
        d1 <= _d1_T @[Alu.scala 91:12]
        skip @[Alu.scala 90:49]
      else : @[Alu.scala 92:18]
        d1 <= UInt<1>("h00") @[Alu.scala 93:12]
        skip @[Alu.scala 92:18]
    node _d0_T = xor(addsub_inst.io.cout, Do_SUB) @[Alu.scala 97:36]
    node _d0_T_1 = or(Do_ADD, Do_SUB) @[Alu.scala 97:56]
    node _d0_T_2 = and(_d0_T, _d0_T_1) @[Alu.scala 97:46]
    node _d0_T_3 = bits(io.A, 0, 0) @[Alu.scala 97:75]
    node _d0_T_4 = or(Do_ASR, Do_LSR) @[Alu.scala 97:89]
    node _d0_T_5 = or(_d0_T_4, Do_ROR) @[Alu.scala 97:99]
    node _d0_T_6 = and(_d0_T_3, _d0_T_5) @[Alu.scala 97:79]
    node d0 = or(_d0_T_2, _d0_T_6) @[Alu.scala 97:68]
    node io_Status_D_hi = cat(UInt<6>("h00"), d1) @[Cat.scala 30:58]
    node _io_Status_D_T = cat(io_Status_D_hi, d0) @[Cat.scala 30:58]
    io.Status_D <= _io_Status_D_T @[Alu.scala 98:17]
    node _status_on_T = or(Do_ASR, Do_LSR) @[Alu.scala 101:28]
    node _status_on_T_1 = or(_status_on_T, Do_ROR) @[Alu.scala 101:38]
    node _status_on_T_2 = or(_status_on_T_1, Do_SUB) @[Alu.scala 101:48]
    node _status_on_T_3 = or(_status_on_T_2, Do_ADD) @[Alu.scala 101:58]
    node _status_on_T_4 = or(_status_on_T_3, Do_AND) @[Alu.scala 101:68]
    node _status_on_T_5 = or(_status_on_T_4, Do_XOR) @[Alu.scala 101:78]
    node status_on = or(_status_on_T_5, Do_OR) @[Alu.scala 101:88]
    node Status_Wr = mux(status_on, UInt<7>("h03"), UInt<7>("h00")) @[Alu.scala 102:24]
    io.Status_Wr <= Status_Wr @[Alu.scala 103:18]
    node _bit_set_T = and(io.ROM_Pattern, io.A) @[Alu.scala 106:35]
    node bit_set = neq(_bit_set_T, UInt<1>("h00")) @[Alu.scala 106:43]
    node _bit_clear_T = and(io.ROM_Pattern, io.A) @[Alu.scala 107:37]
    node bit_clear = eq(_bit_clear_T, UInt<1>("h00")) @[Alu.scala 107:45]
    node _io_Z_Skip_T = and(bit_set, Do_SBRS) @[Alu.scala 108:27]
    node _io_Z_Skip_T_1 = and(bit_clear, Do_SBRC) @[Alu.scala 108:53]
    node _io_Z_Skip_T_2 = or(_io_Z_Skip_T, _io_Z_Skip_T_1) @[Alu.scala 108:39]
    io.Z_Skip <= _io_Z_Skip_T_2 @[Alu.scala 108:15]
    
  module Pcs : 
    input clock : Clock
    input reset : Reset
    output io : {flip Offs_In : UInt<12>, flip Pause : UInt<1>, flip RJmp : UInt<1>, NPC : UInt<12>, PC : UInt<12>}
    
    node inc_or_nop_lo = not(io.Pause) @[Pcs.scala 17:37]
    node inc_or_nop = cat(UInt<11>("h00"), inc_or_nop_lo) @[Cat.scala 30:58]
    node _real_offset_T = eq(io.RJmp, UInt<1>("h00")) @[Pcs.scala 18:35]
    node real_offset = mux(_real_offset_T, inc_or_nop, io.Offs_In) @[Pcs.scala 18:26]
    reg PC : UInt<12>, clock with : (reset => (reset, UInt<1>("h00"))) @[Pcs.scala 19:21]
    node _io_NPC_T = add(PC, real_offset) @[Pcs.scala 21:18]
    node _io_NPC_T_1 = tail(_io_NPC_T, 1) @[Pcs.scala 21:18]
    io.NPC <= _io_NPC_T_1 @[Pcs.scala 21:12]
    PC <= io.NPC @[Pcs.scala 22:8]
    io.PC <= PC @[Pcs.scala 23:11]
    
  module Reg : 
    input clock : Clock
    input reset : Reset
    output io : {flip Wr : UInt<1>, flip Rd_Addr : UInt<5>, flip Rr_Addr : UInt<5>, flip Data_In : UInt<8>, Rd_Data : UInt<8>, Rr_Data : UInt<8>, Z : UInt<16>}
    
    reg Zr : UInt<16>, clock @[Reg.scala 17:17]
    io.Z <= Zr @[Reg.scala 18:10]
    reg RAM_Write_Address : UInt<5>, clock @[Reg.scala 22:32]
    RAM_Write_Address <= io.Rd_Addr @[Reg.scala 23:23]
    smem RAMD : UInt<8>[32], undefined @[Reg.scala 27:27]
    read mport RAMD_Out = RAMD[io.Rd_Addr], clock @[Reg.scala 28:29]
    when io.Wr : @[Reg.scala 29:18]
      write mport MPORT = RAMD[RAM_Write_Address], clock
      MPORT <= io.Data_In
      skip @[Reg.scala 29:18]
    smem RAMR : UInt<8>[32], undefined @[Reg.scala 35:27]
    read mport RAMR_Out = RAMR[io.Rr_Addr], clock @[Reg.scala 36:29]
    when io.Wr : @[Reg.scala 37:18]
      write mport MPORT_1 = RAMR[RAM_Write_Address], clock
      MPORT_1 <= io.Data_In
      skip @[Reg.scala 37:18]
    reg Write_Data : UInt<8>, clock @[Reg.scala 43:25]
    reg Bypass_D : UInt<1>, clock @[Reg.scala 44:23]
    reg Bypass_R : UInt<1>, clock @[Reg.scala 45:23]
    node _Bypass_D_T = eq(RAM_Write_Address, io.Rd_Addr) @[Reg.scala 47:44]
    node _Bypass_D_T_1 = and(io.Wr, _Bypass_D_T) @[Reg.scala 47:23]
    Bypass_D <= _Bypass_D_T_1 @[Reg.scala 47:14]
    node _Bypass_R_T = eq(RAM_Write_Address, io.Rr_Addr) @[Reg.scala 48:44]
    node _Bypass_R_T_1 = and(io.Wr, _Bypass_R_T) @[Reg.scala 48:23]
    Bypass_R <= _Bypass_R_T_1 @[Reg.scala 48:14]
    Write_Data <= io.Data_In @[Reg.scala 49:16]
    node _io_Rd_Data_T = mux(Bypass_D, Write_Data, RAMD_Out) @[Reg.scala 51:22]
    io.Rd_Data <= _io_Rd_Data_T @[Reg.scala 51:16]
    node _io_Rr_Data_T = mux(Bypass_R, Write_Data, RAMR_Out) @[Reg.scala 52:22]
    io.Rr_Data <= _io_Rr_Data_T @[Reg.scala 52:16]
    node _T = eq(RAM_Write_Address, UInt<5>("h01e")) @[Reg.scala 56:37]
    node _T_1 = and(io.Wr, _T) @[Reg.scala 56:17]
    when _T_1 : @[Reg.scala 56:58]
      node Zr_hi = bits(Zr, 15, 8) @[Reg.scala 57:21]
      node _Zr_T = cat(Zr_hi, io.Data_In) @[Cat.scala 30:58]
      Zr <= _Zr_T @[Reg.scala 57:12]
      skip @[Reg.scala 56:58]
    node _T_2 = eq(RAM_Write_Address, UInt<5>("h01f")) @[Reg.scala 59:38]
    node _T_3 = and(io.Wr, _T_2) @[Reg.scala 59:17]
    when _T_3 : @[Reg.scala 59:60]
      node Zr_lo = bits(Zr, 7, 0) @[Reg.scala 60:33]
      node _Zr_T_1 = cat(io.Data_In, Zr_lo) @[Cat.scala 30:58]
      Zr <= _Zr_T_1 @[Reg.scala 60:12]
      skip @[Reg.scala 59:60]
    when io.Wr : @[Reg.scala 63:18]
      skip @[Reg.scala 63:18]
    
  module Core : 
    input clock : Clock
    input reset : UInt<1>
    output io : {ROM_Addr : UInt<10>, flip ROM_Data : UInt<16>, ZZ : UInt<16>, flip ram_datain : UInt<8>, ram_write : UInt<1>, ram_read : UInt<1>, flip ram_ready : UInt<1>, IO_Rd : UInt<1>, IO_Wr : UInt<1>, IO_Addr : UInt<6>, flip IO_RData : UInt<8>, IO_WData : UInt<8>}
    
    reg SREG_i : UInt<2>, clock @[Core.scala 13:21]
    wire NPC : UInt<12> @[Core.scala 14:19]
    wire PC : UInt<12> @[Core.scala 15:18]
    wire Z : UInt<16> @[Core.scala 16:17]
    wire Do_Other : UInt<1> @[Core.scala 20:24]
    wire Pass_Mux : UInt<8> @[Core.scala 21:24]
    wire Op_Mux : UInt<8> @[Core.scala 22:22]
    wire Status_D : UInt<7> @[Core.scala 23:24]
    wire Status_Wr : UInt<7> @[Core.scala 24:25]
    wire Rd_Addr : UInt<5> @[Core.scala 28:23]
    wire Rr_Addr : UInt<5> @[Core.scala 29:23]
    reg IO_Addr_i : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[Core.scala 31:28]
    wire Wr_Data : UInt<8> @[Core.scala 32:23]
    wire Rr_Data : UInt<8> @[Core.scala 33:22]
    wire Offset : UInt<12> @[Core.scala 34:22]
    wire Offset_small : UInt<12> @[Core.scala 35:28]
    wire Q : UInt<8> @[Core.scala 36:17]
    wire Disp : UInt<6> @[Core.scala 37:20]
    reg Bit_Pattern : UInt<8>, clock @[Core.scala 38:26]
    reg Inst : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[Core.scala 40:23]
    reg Rst_r : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[Core.scala 43:24]
    wire RAM_IR : UInt<1> @[Core.scala 44:22]
    wire RAM_IW : UInt<1> @[Core.scala 45:22]
    wire Reg_IW : UInt<1> @[Core.scala 46:22]
    wire Reg_Wr : UInt<1> @[Core.scala 47:22]
    reg Reg_Rd : UInt<1>, clock @[Core.scala 48:21]
    reg RAM_Rd : UInt<1>, clock @[Core.scala 49:21]
    reg Reg_Wr_ID : UInt<1>, clock @[Core.scala 50:24]
    reg RAM_Wr_ID : UInt<1>, clock @[Core.scala 51:24]
    wire PassB : UInt<1> @[Core.scala 52:21]
    reg IO_Rd_i : UInt<1>, clock @[Core.scala 53:22]
    reg IO_Wr_i : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 54:26]
    wire Z_Skip : UInt<1> @[Core.scala 55:22]
    wire Pause : UInt<2> @[Core.scala 56:21]
    reg DidPause : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 57:27]
    wire PCPause : UInt<1> @[Core.scala 58:23]
    wire Inst_Skip : UInt<1> @[Core.scala 59:25]
    wire PreDecode : UInt<1> @[Core.scala 60:25]
    reg Imm_Op : UInt<1>, clock @[Core.scala 61:21]
    wire RJmp : UInt<1> @[Core.scala 63:20]
    wire CBranch : UInt<1> @[Core.scala 64:23]
    node io_ZZ_hi_hi = bits(Z, 15, 2) @[Core.scala 68:19]
    node _io_ZZ_T = bits(Z, 1, 1) @[Core.scala 68:29]
    node _io_ZZ_T_1 = bits(Inst, 1, 1) @[Core.scala 68:39]
    node io_ZZ_hi_lo = xor(_io_ZZ_T, _io_ZZ_T_1) @[Core.scala 68:33]
    node _io_ZZ_T_2 = bits(Z, 0, 0) @[Core.scala 68:45]
    node _io_ZZ_T_3 = bits(Inst, 0, 0) @[Core.scala 68:55]
    node io_ZZ_lo = xor(_io_ZZ_T_2, _io_ZZ_T_3) @[Core.scala 68:49]
    node io_ZZ_hi = cat(io_ZZ_hi_hi, io_ZZ_hi_lo) @[Cat.scala 30:58]
    node _io_ZZ_T_4 = cat(io_ZZ_hi, io_ZZ_lo) @[Cat.scala 30:58]
    io.ZZ <= _io_ZZ_T_4 @[Core.scala 68:11]
    io.ram_write <= RAM_IW @[Core.scala 70:18]
    io.ram_read <= RAM_Rd @[Core.scala 71:17]
    node _PreDecode_T = eq(Rst_r, UInt<1>("h00")) @[Core.scala 72:29]
    node _PreDecode_T_1 = eq(Inst_Skip, UInt<1>("h00")) @[Core.scala 72:51]
    node _PreDecode_T_2 = and(_PreDecode_T, _PreDecode_T_1) @[Core.scala 72:38]
    node _PreDecode_T_3 = eq(Pause, UInt<2>("h00")) @[Core.scala 73:16]
    node _PreDecode_T_4 = and(_PreDecode_T_2, _PreDecode_T_3) @[Core.scala 73:7]
    node _PreDecode_T_5 = eq(DidPause, UInt<2>("h01")) @[Core.scala 73:41]
    node _PreDecode_T_6 = or(_PreDecode_T_4, _PreDecode_T_5) @[Core.scala 73:30]
    node _PreDecode_T_7 = mux(_PreDecode_T_6, UInt<1>("h01"), UInt<1>("h00")) @[Core.scala 72:21]
    PreDecode <= _PreDecode_T_7 @[Core.scala 72:15]
    node _Disp_T = bits(Inst, 13, 13) @[Core.scala 75:17]
    node _Disp_T_1 = bits(Inst, 11, 10) @[Core.scala 75:29]
    node _Disp_T_2 = cat(_Disp_T, _Disp_T_1) @[Core.scala 75:22]
    node _Disp_T_3 = bits(Inst, 2, 0) @[Core.scala 75:45]
    node _Disp_T_4 = cat(_Disp_T_2, _Disp_T_3) @[Core.scala 75:38]
    Disp <= _Disp_T_4 @[Core.scala 75:10]
    node _Reg_Wr_T = bits(Inst, 15, 12) @[Core.scala 77:23]
    node _Reg_Wr_T_1 = eq(_Reg_Wr_T, UInt<4>("h02")) @[Core.scala 77:32]
    node _Reg_Wr_T_2 = bits(Inst, 15, 14) @[Core.scala 78:23]
    node _Reg_Wr_T_3 = eq(_Reg_Wr_T_2, UInt<2>("h01")) @[Core.scala 78:32]
    node _Reg_Wr_T_4 = or(_Reg_Wr_T_1, _Reg_Wr_T_3) @[Core.scala 77:52]
    node _Reg_Wr_T_5 = bits(Inst, 15, 11) @[Core.scala 79:23]
    node _Reg_Wr_T_6 = eq(_Reg_Wr_T_5, UInt<5>("h01")) @[Core.scala 79:32]
    node _Reg_Wr_T_7 = or(_Reg_Wr_T_4, _Reg_Wr_T_6) @[Core.scala 78:52]
    node _Reg_Wr_T_8 = bits(Inst, 15, 11) @[Core.scala 80:23]
    node _Reg_Wr_T_9 = eq(_Reg_Wr_T_8, UInt<5>("h03")) @[Core.scala 80:32]
    node _Reg_Wr_T_10 = or(_Reg_Wr_T_7, _Reg_Wr_T_9) @[Core.scala 79:52]
    node _Reg_Wr_T_11 = bits(Inst, 15, 12) @[Core.scala 81:23]
    node _Reg_Wr_T_12 = eq(_Reg_Wr_T_11, UInt<4>("h0e")) @[Core.scala 81:32]
    node _Reg_Wr_T_13 = or(_Reg_Wr_T_10, _Reg_Wr_T_12) @[Core.scala 80:52]
    node _Reg_Wr_T_14 = bits(Inst, 15, 9) @[Core.scala 82:23]
    node _Reg_Wr_T_15 = eq(_Reg_Wr_T_14, UInt<7>("h04a")) @[Core.scala 82:32]
    node _Reg_Wr_T_16 = bits(Inst, 3, 1) @[Core.scala 82:60]
    node _Reg_Wr_T_17 = neq(_Reg_Wr_T_16, UInt<3>("h04")) @[Core.scala 82:67]
    node _Reg_Wr_T_18 = and(_Reg_Wr_T_15, _Reg_Wr_T_17) @[Core.scala 82:54]
    node _Reg_Wr_T_19 = or(_Reg_Wr_T_13, _Reg_Wr_T_18) @[Core.scala 81:52]
    node _Reg_Wr_T_20 = bits(Inst, 15, 11) @[Core.scala 83:23]
    node _Reg_Wr_T_21 = eq(_Reg_Wr_T_20, UInt<5>("h016")) @[Core.scala 83:32]
    node _Reg_Wr_T_22 = or(_Reg_Wr_T_19, _Reg_Wr_T_21) @[Core.scala 82:85]
    node _Reg_Wr_T_23 = eq(Reg_Wr_ID, UInt<1>("h01")) @[Core.scala 84:32]
    node _Reg_Wr_T_24 = or(_Reg_Wr_T_22, _Reg_Wr_T_23) @[Core.scala 83:53]
    node _Reg_Wr_T_25 = mux(_Reg_Wr_T_24, UInt<1>("h01"), UInt<1>("h00")) @[Core.scala 77:18]
    Reg_Wr <= _Reg_Wr_T_25 @[Core.scala 77:12]
    Reg_Wr_ID <= Reg_IW @[Core.scala 89:15]
    RAM_Wr_ID <= RAM_IW @[Core.scala 90:15]
    node _is_an_imm_op_T = bits(io.ROM_Data, 15, 12) @[Core.scala 94:36]
    node _is_an_imm_op_T_1 = eq(_is_an_imm_op_T, UInt<4>("h03")) @[Core.scala 94:45]
    node _is_an_imm_op_T_2 = bits(io.ROM_Data, 15, 14) @[Core.scala 94:78]
    node _is_an_imm_op_T_3 = eq(_is_an_imm_op_T_2, UInt<2>("h01")) @[Core.scala 94:87]
    node _is_an_imm_op_T_4 = or(_is_an_imm_op_T_1, _is_an_imm_op_T_3) @[Core.scala 94:65]
    node _is_an_imm_op_T_5 = bits(io.ROM_Data, 15, 12) @[Core.scala 94:117]
    node _is_an_imm_op_T_6 = eq(_is_an_imm_op_T_5, UInt<4>("h0e")) @[Core.scala 94:126]
    node is_an_imm_op = or(_is_an_imm_op_T_4, _is_an_imm_op_T_6) @[Core.scala 94:104]
    node _Rd_Addr_T = bits(io.ROM_Data, 8, 4) @[Core.scala 97:27]
    Rd_Addr <= _Rd_Addr_T @[Core.scala 97:13]
    node Rr_Addr_hi = bits(io.ROM_Data, 9, 9) @[Core.scala 98:31]
    node Rr_Addr_lo = bits(io.ROM_Data, 3, 0) @[Core.scala 98:47]
    node _Rr_Addr_T = cat(Rr_Addr_hi, Rr_Addr_lo) @[Cat.scala 30:58]
    Rr_Addr <= _Rr_Addr_T @[Core.scala 98:13]
    when is_an_imm_op : @[Core.scala 101:24]
      node _Rd_Addr_T_1 = bits(io.ROM_Data, 7, 4) @[Core.scala 102:36]
      node _Rd_Addr_T_2 = cat(UInt<1>("h01"), _Rd_Addr_T_1) @[Core.scala 102:22]
      Rd_Addr <= _Rd_Addr_T_2 @[Core.scala 102:15]
      skip @[Core.scala 101:24]
    node _T = eq(DidPause, UInt<2>("h00")) @[Core.scala 104:20]
    node _T_1 = eq(Pause, UInt<2>("h01")) @[Core.scala 104:43]
    node _T_2 = and(_T, _T_1) @[Core.scala 104:34]
    when _T_2 : @[Core.scala 104:58]
      node _T_3 = bits(Inst, 15, 9) @[Core.scala 105:16]
      node _T_4 = eq(_T_3, UInt<7>("h040")) @[Core.scala 105:24]
      when _T_4 : @[Core.scala 105:47]
        node _Rd_Addr_T_3 = bits(Inst, 8, 4) @[Core.scala 106:24]
        Rd_Addr <= _Rd_Addr_T_3 @[Core.scala 106:17]
        skip @[Core.scala 105:47]
      node _T_5 = bits(Inst, 15, 9) @[Core.scala 108:16]
      node _T_6 = eq(_T_5, UInt<7>("h041")) @[Core.scala 108:24]
      when _T_6 : @[Core.scala 108:47]
        node _Rd_Addr_T_4 = bits(Inst, 8, 4) @[Core.scala 109:24]
        Rd_Addr <= _Rd_Addr_T_4 @[Core.scala 109:17]
        skip @[Core.scala 108:47]
      skip @[Core.scala 104:58]
    RAM_IR <= UInt<1>("h00") @[Core.scala 118:12]
    Reg_IW <= UInt<1>("h00") @[Core.scala 119:12]
    RAM_IW <= UInt<1>("h00") @[Core.scala 120:12]
    node _T_7 = eq(DidPause, UInt<2>("h00")) @[Core.scala 121:19]
    node _T_8 = bits(Inst, 15, 10) @[Core.scala 121:38]
    node _T_9 = eq(_T_8, UInt<6>("h020")) @[Core.scala 121:47]
    node _T_10 = and(_T_7, _T_9) @[Core.scala 121:32]
    when _T_10 : @[Core.scala 121:69]
      node _T_11 = bits(Inst, 9, 9) @[Core.scala 122:16]
      node _T_12 = eq(_T_11, UInt<1>("h00")) @[Core.scala 122:20]
      when _T_12 : @[Core.scala 122:29]
        RAM_IR <= UInt<1>("h01") @[Core.scala 123:16]
        Reg_IW <= UInt<1>("h01") @[Core.scala 124:16]
        skip @[Core.scala 122:29]
      else : @[Core.scala 125:20]
        RAM_IW <= UInt<1>("h01") @[Core.scala 126:16]
        skip @[Core.scala 125:20]
      skip @[Core.scala 121:69]
    io.IO_Addr <= IO_Addr_i @[Core.scala 132:16]
    io.IO_Rd <= IO_Rd_i @[Core.scala 133:14]
    io.IO_Wr <= IO_Wr_i @[Core.scala 134:14]
    node _IO_Wr_i_T = bits(Inst, 15, 11) @[Core.scala 138:24]
    node _IO_Wr_i_T_1 = eq(_IO_Wr_i_T, UInt<5>("h013")) @[Core.scala 138:33]
    node _IO_Wr_i_T_2 = bits(Inst, 8, 8) @[Core.scala 139:24]
    node _IO_Wr_i_T_3 = eq(_IO_Wr_i_T_2, UInt<1>("h00")) @[Core.scala 139:28]
    node _IO_Wr_i_T_4 = and(_IO_Wr_i_T_1, _IO_Wr_i_T_3) @[Core.scala 138:54]
    node _IO_Wr_i_T_5 = bits(DidPause, 0, 0) @[Core.scala 140:28]
    node _IO_Wr_i_T_6 = eq(_IO_Wr_i_T_5, UInt<1>("h00")) @[Core.scala 140:32]
    node _IO_Wr_i_T_7 = and(_IO_Wr_i_T_4, _IO_Wr_i_T_6) @[Core.scala 139:54]
    node _IO_Wr_i_T_8 = bits(io.ROM_Data, 15, 11) @[Core.scala 141:30]
    node _IO_Wr_i_T_9 = eq(_IO_Wr_i_T_8, UInt<5>("h017")) @[Core.scala 141:39]
    node _IO_Wr_i_T_10 = eq(PreDecode, UInt<1>("h01")) @[Core.scala 142:29]
    node _IO_Wr_i_T_11 = and(_IO_Wr_i_T_9, _IO_Wr_i_T_10) @[Core.scala 141:60]
    node _IO_Wr_i_T_12 = or(_IO_Wr_i_T_7, _IO_Wr_i_T_11) @[Core.scala 140:54]
    node _IO_Wr_i_T_13 = mux(_IO_Wr_i_T_12, UInt<1>("h01"), UInt<1>("h00")) @[Core.scala 138:19]
    IO_Wr_i <= _IO_Wr_i_T_13 @[Core.scala 138:13]
    node _T_13 = bits(Inst, 15, 10) @[Core.scala 145:15]
    node _T_14 = neq(_T_13, UInt<6>("h026")) @[Core.scala 145:24]
    node _T_15 = bits(DidPause, 0, 0) @[Core.scala 145:56]
    node _T_16 = eq(_T_15, UInt<1>("h01")) @[Core.scala 145:60]
    node _T_17 = or(_T_14, _T_16) @[Core.scala 145:46]
    when _T_17 : @[Core.scala 145:69]
      node _IO_Addr_i_T = bits(io.ROM_Data, 13, 13) @[Core.scala 146:37]
      node _IO_Addr_i_T_1 = eq(_IO_Addr_i_T, UInt<1>("h00")) @[Core.scala 146:42]
      node _IO_Addr_i_T_2 = bits(io.ROM_Data, 7, 3) @[Core.scala 147:40]
      node _IO_Addr_i_T_3 = cat(UInt<1>("h00"), _IO_Addr_i_T_2) @[Core.scala 147:26]
      node _IO_Addr_i_T_4 = bits(io.ROM_Data, 10, 9) @[Core.scala 148:33]
      node _IO_Addr_i_T_5 = bits(io.ROM_Data, 3, 0) @[Core.scala 148:55]
      node _IO_Addr_i_T_6 = cat(_IO_Addr_i_T_4, _IO_Addr_i_T_5) @[Core.scala 148:41]
      node _IO_Addr_i_T_7 = mux(_IO_Addr_i_T_1, _IO_Addr_i_T_3, _IO_Addr_i_T_6) @[Core.scala 146:25]
      IO_Addr_i <= _IO_Addr_i_T_7 @[Core.scala 146:19]
      skip @[Core.scala 145:69]
    node _Inst_Skip_T = or(Z_Skip, RJmp) @[Core.scala 152:25]
    Inst_Skip <= _Inst_Skip_T @[Core.scala 152:15]
    Rst_r <= UInt<1>("h00") @[Core.scala 156:11]
    node _DidPause_T = eq(DidPause, UInt<2>("h00")) @[Core.scala 157:30]
    node _DidPause_T_1 = sub(DidPause, UInt<1>("h01")) @[Core.scala 157:60]
    node _DidPause_T_2 = tail(_DidPause_T_1, 1) @[Core.scala 157:60]
    node _DidPause_T_3 = mux(_DidPause_T, Pause, _DidPause_T_2) @[Core.scala 157:20]
    DidPause <= _DidPause_T_3 @[Core.scala 157:14]
    node _Inst_T = eq(Inst_Skip, UInt<1>("h01")) @[Core.scala 159:27]
    node _Inst_T_1 = eq(Rst_r, UInt<1>("h01")) @[Core.scala 159:48]
    node _Inst_T_2 = or(_Inst_T, _Inst_T_1) @[Core.scala 159:40]
    node _Inst_T_3 = neq(Pause, UInt<1>("h00")) @[Core.scala 159:83]
    node _Inst_T_4 = eq(DidPause, UInt<1>("h00")) @[Core.scala 159:102]
    node _Inst_T_5 = and(_Inst_T_3, _Inst_T_4) @[Core.scala 159:91]
    node _Inst_T_6 = bits(DidPause, 1, 1) @[Core.scala 159:120]
    node _Inst_T_7 = eq(_Inst_T_6, UInt<1>("h01")) @[Core.scala 159:124]
    node _Inst_T_8 = or(_Inst_T_5, _Inst_T_7) @[Core.scala 159:110]
    node _Inst_T_9 = mux(_Inst_T_8, Inst, io.ROM_Data) @[Core.scala 159:76]
    node _Inst_T_10 = mux(_Inst_T_2, UInt<16>("h00"), _Inst_T_9) @[Core.scala 159:16]
    Inst <= _Inst_T_10 @[Core.scala 159:10]
    node _T_18 = bits(Status_Wr, 0, 0) @[Core.scala 163:19]
    node _T_19 = eq(_T_18, UInt<1>("h01")) @[Core.scala 163:23]
    when _T_19 : @[Core.scala 163:32]
      node _SREG_i_T = bits(Status_D, 1, 0) @[Core.scala 164:25]
      SREG_i <= _SREG_i_T @[Core.scala 164:14]
      skip @[Core.scala 163:32]
    node _Bit_Pattern_T = bits(io.ROM_Data, 2, 0) @[Core.scala 169:41]
    node _Bit_Pattern_T_1 = eq(UInt<1>("h00"), _Bit_Pattern_T) @[Mux.scala 80:60]
    node _Bit_Pattern_T_2 = mux(_Bit_Pattern_T_1, UInt<1>("h01"), UInt<8>("h080")) @[Mux.scala 80:57]
    node _Bit_Pattern_T_3 = eq(UInt<1>("h01"), _Bit_Pattern_T) @[Mux.scala 80:60]
    node _Bit_Pattern_T_4 = mux(_Bit_Pattern_T_3, UInt<2>("h02"), _Bit_Pattern_T_2) @[Mux.scala 80:57]
    node _Bit_Pattern_T_5 = eq(UInt<2>("h02"), _Bit_Pattern_T) @[Mux.scala 80:60]
    node _Bit_Pattern_T_6 = mux(_Bit_Pattern_T_5, UInt<3>("h04"), _Bit_Pattern_T_4) @[Mux.scala 80:57]
    node _Bit_Pattern_T_7 = eq(UInt<2>("h03"), _Bit_Pattern_T) @[Mux.scala 80:60]
    node _Bit_Pattern_T_8 = mux(_Bit_Pattern_T_7, UInt<4>("h08"), _Bit_Pattern_T_6) @[Mux.scala 80:57]
    node _Bit_Pattern_T_9 = eq(UInt<3>("h04"), _Bit_Pattern_T) @[Mux.scala 80:60]
    node _Bit_Pattern_T_10 = mux(_Bit_Pattern_T_9, UInt<5>("h010"), _Bit_Pattern_T_8) @[Mux.scala 80:57]
    node _Bit_Pattern_T_11 = eq(UInt<3>("h05"), _Bit_Pattern_T) @[Mux.scala 80:60]
    node _Bit_Pattern_T_12 = mux(_Bit_Pattern_T_11, UInt<6>("h020"), _Bit_Pattern_T_10) @[Mux.scala 80:57]
    node _Bit_Pattern_T_13 = eq(UInt<3>("h06"), _Bit_Pattern_T) @[Mux.scala 80:60]
    node _Bit_Pattern_T_14 = mux(_Bit_Pattern_T_13, UInt<7>("h040"), _Bit_Pattern_T_12) @[Mux.scala 80:57]
    Bit_Pattern <= _Bit_Pattern_T_14 @[Core.scala 169:17]
    node _io_ROM_Addr_T = bits(NPC, 9, 0) @[Core.scala 172:23]
    io.ROM_Addr <= _io_ROM_Addr_T @[Core.scala 172:17]
    node _PCPause_T = eq(Rst_r, UInt<1>("h01")) @[Core.scala 173:26]
    node _PCPause_T_1 = neq(Pause, UInt<1>("h00")) @[Core.scala 173:43]
    node _PCPause_T_2 = eq(DidPause, UInt<1>("h00")) @[Core.scala 173:62]
    node _PCPause_T_3 = and(_PCPause_T_1, _PCPause_T_2) @[Core.scala 173:51]
    node _PCPause_T_4 = bits(DidPause, 1, 1) @[Core.scala 173:80]
    node _PCPause_T_5 = or(_PCPause_T_3, _PCPause_T_4) @[Core.scala 173:70]
    node _PCPause_T_6 = or(_PCPause_T, _PCPause_T_5) @[Core.scala 173:34]
    node _PCPause_T_7 = mux(_PCPause_T_6, UInt<1>("h01"), UInt<1>("h00")) @[Core.scala 173:19]
    PCPause <= _PCPause_T_7 @[Core.scala 173:13]
    node _RJmp_T = bits(Inst, 15, 12) @[Core.scala 175:21]
    node _RJmp_T_1 = eq(_RJmp_T, UInt<4>("h0c")) @[Core.scala 175:30]
    node _RJmp_T_2 = bits(Inst, 15, 12) @[Core.scala 176:21]
    node _RJmp_T_3 = eq(_RJmp_T_2, UInt<4>("h0d")) @[Core.scala 176:30]
    node _RJmp_T_4 = eq(DidPause, UInt<2>("h02")) @[Core.scala 176:55]
    node _RJmp_T_5 = and(_RJmp_T_3, _RJmp_T_4) @[Core.scala 176:44]
    node _RJmp_T_6 = or(_RJmp_T_1, _RJmp_T_5) @[Core.scala 175:44]
    node _RJmp_T_7 = eq(CBranch, UInt<1>("h01")) @[Core.scala 177:25]
    node _RJmp_T_8 = bits(Inst, 10, 10) @[Core.scala 177:39]
    node _RJmp_T_9 = eq(_RJmp_T_8, UInt<1>("h00")) @[Core.scala 177:44]
    node _RJmp_T_10 = and(_RJmp_T_7, _RJmp_T_9) @[Core.scala 177:33]
    node _RJmp_T_11 = bits(Bit_Pattern, 1, 0) @[Core.scala 178:38]
    node _RJmp_T_12 = and(SREG_i, _RJmp_T_11) @[Core.scala 178:25]
    node _RJmp_T_13 = neq(_RJmp_T_12, UInt<1>("h00")) @[Core.scala 178:46]
    node _RJmp_T_14 = and(_RJmp_T_10, _RJmp_T_13) @[Core.scala 177:52]
    node _RJmp_T_15 = or(_RJmp_T_6, _RJmp_T_14) @[Core.scala 176:63]
    node _RJmp_T_16 = eq(CBranch, UInt<1>("h01")) @[Core.scala 178:64]
    node _RJmp_T_17 = bits(Inst, 10, 10) @[Core.scala 178:78]
    node _RJmp_T_18 = eq(_RJmp_T_17, UInt<1>("h01")) @[Core.scala 178:83]
    node _RJmp_T_19 = and(_RJmp_T_16, _RJmp_T_18) @[Core.scala 178:72]
    node _RJmp_T_20 = bits(Bit_Pattern, 1, 0) @[Core.scala 179:38]
    node _RJmp_T_21 = and(SREG_i, _RJmp_T_20) @[Core.scala 179:25]
    node _RJmp_T_22 = eq(_RJmp_T_21, UInt<1>("h00")) @[Core.scala 179:46]
    node _RJmp_T_23 = and(_RJmp_T_19, _RJmp_T_22) @[Core.scala 178:91]
    node _RJmp_T_24 = or(_RJmp_T_15, _RJmp_T_23) @[Core.scala 178:54]
    node _RJmp_T_25 = mux(_RJmp_T_24, UInt<1>("h01"), UInt<1>("h00")) @[Core.scala 175:16]
    RJmp <= _RJmp_T_25 @[Core.scala 175:10]
    node _CBranch_T = bits(Inst, 15, 11) @[Core.scala 181:24]
    node _CBranch_T_1 = eq(_CBranch_T, UInt<5>("h01e")) @[Core.scala 181:33]
    node _CBranch_T_2 = mux(_CBranch_T_1, UInt<1>("h01"), UInt<1>("h00")) @[Core.scala 181:19]
    CBranch <= _CBranch_T_2 @[Core.scala 181:13]
    node _Pause_T = bits(Inst, 15, 10) @[Core.scala 182:22]
    node _Pause_T_1 = eq(_Pause_T, UInt<6>("h020")) @[Core.scala 182:31]
    node _Pause_T_2 = mux(_Pause_T_1, UInt<2>("h01"), UInt<2>("h00")) @[Core.scala 182:17]
    Pause <= _Pause_T_2 @[Core.scala 182:11]
    node _Offset_small_T = bits(Inst, 9, 9) @[Core.scala 184:25]
    node _Offset_small_T_1 = bits(Inst, 9, 9) @[Core.scala 184:36]
    node _Offset_small_T_2 = cat(_Offset_small_T, _Offset_small_T_1) @[Core.scala 184:29]
    node _Offset_small_T_3 = bits(Inst, 9, 9) @[Core.scala 184:47]
    node _Offset_small_T_4 = cat(_Offset_small_T_2, _Offset_small_T_3) @[Core.scala 184:40]
    node _Offset_small_T_5 = bits(Inst, 9, 9) @[Core.scala 184:58]
    node _Offset_small_T_6 = cat(_Offset_small_T_4, _Offset_small_T_5) @[Core.scala 184:51]
    node _Offset_small_T_7 = bits(Inst, 9, 9) @[Core.scala 184:69]
    node _Offset_small_T_8 = cat(_Offset_small_T_6, _Offset_small_T_7) @[Core.scala 184:62]
    node _Offset_small_T_9 = bits(Inst, 9, 3) @[Core.scala 184:80]
    node _Offset_small_T_10 = cat(_Offset_small_T_8, _Offset_small_T_9) @[Core.scala 184:73]
    Offset_small <= _Offset_small_T_10 @[Core.scala 184:18]
    node _Offset_T = eq(CBranch, UInt<1>("h00")) @[Core.scala 185:27]
    node _Offset_T_1 = bits(Inst, 11, 0) @[Core.scala 185:40]
    node _Offset_T_2 = mux(_Offset_T, _Offset_T_1, Offset_small) @[Core.scala 185:18]
    Offset <= _Offset_T_2 @[Core.scala 185:12]
    node _PassB_T = neq(Pause, UInt<1>("h00")) @[Core.scala 187:27]
    node _PassB_T_1 = neq(DidPause, UInt<1>("h01")) @[Core.scala 187:46]
    node _PassB_T_2 = and(_PassB_T, _PassB_T_1) @[Core.scala 187:35]
    node _PassB_T_3 = mux(_PassB_T_2, UInt<1>("h01"), UInt<1>("h00")) @[Core.scala 187:20]
    PassB <= _PassB_T_3 @[Core.scala 187:14]
    node _Pass_Mux_T = eq(Imm_Op, UInt<1>("h01")) @[Core.scala 188:28]
    node _Pass_Mux_T_1 = bits(Inst, 11, 8) @[Core.scala 188:41]
    node _Pass_Mux_T_2 = bits(Inst, 3, 0) @[Core.scala 188:56]
    node _Pass_Mux_T_3 = cat(_Pass_Mux_T_1, _Pass_Mux_T_2) @[Core.scala 188:49]
    node _Pass_Mux_T_4 = eq(RAM_Rd, UInt<1>("h01")) @[Core.scala 188:75]
    node _Pass_Mux_T_5 = eq(Reg_Rd, UInt<1>("h01")) @[Core.scala 188:110]
    node _Pass_Mux_T_6 = mux(_Pass_Mux_T_5, Rr_Data, io.IO_RData) @[Core.scala 188:102]
    node _Pass_Mux_T_7 = mux(_Pass_Mux_T_4, io.ram_datain, _Pass_Mux_T_6) @[Core.scala 188:67]
    node _Pass_Mux_T_8 = mux(_Pass_Mux_T, _Pass_Mux_T_3, _Pass_Mux_T_7) @[Core.scala 188:20]
    Pass_Mux <= _Pass_Mux_T_8 @[Core.scala 188:14]
    node _Wr_Data_T = mux(Do_Other, Pass_Mux, Q) @[Core.scala 189:20]
    Wr_Data <= _Wr_Data_T @[Core.scala 189:14]
    node _Op_Mux_T = bits(Inst, 11, 8) @[Core.scala 190:33]
    node _Op_Mux_T_1 = bits(Inst, 3, 0) @[Core.scala 190:48]
    node _Op_Mux_T_2 = cat(_Op_Mux_T, _Op_Mux_T_1) @[Core.scala 190:41]
    node _Op_Mux_T_3 = mux(Imm_Op, _Op_Mux_T_2, Rr_Data) @[Core.scala 190:20]
    Op_Mux <= _Op_Mux_T_3 @[Core.scala 190:14]
    node _T_20 = eq(RAM_Rd, UInt<1>("h01")) @[Core.scala 192:29]
    node _T_21 = and(Do_Other, _T_20) @[Core.scala 192:20]
    node _T_22 = neq(Imm_Op, UInt<1>("h01")) @[Core.scala 192:46]
    node _T_23 = and(_T_21, _T_22) @[Core.scala 192:37]
    when _T_23 : @[Core.scala 192:55]
      skip @[Core.scala 192:55]
    IO_Rd_i <= UInt<1>("h00") @[Core.scala 197:13]
    Imm_Op <= UInt<1>("h00") @[Core.scala 198:12]
    RAM_Rd <= UInt<1>("h00") @[Core.scala 199:12]
    Reg_Rd <= UInt<1>("h00") @[Core.scala 200:12]
    node _T_24 = eq(PreDecode, UInt<1>("h01")) @[Core.scala 201:35]
    node _T_25 = and(is_an_imm_op, _T_24) @[Core.scala 201:23]
    when _T_25 : @[Core.scala 201:44]
      Imm_Op <= UInt<1>("h01") @[Core.scala 202:19]
      skip @[Core.scala 201:44]
    else : @[Core.scala 203:32]
      node _T_26 = eq(RAM_IR, UInt<1>("h01")) @[Core.scala 203:23]
      when _T_26 : @[Core.scala 203:32]
        RAM_Rd <= UInt<1>("h01") @[Core.scala 204:14]
        skip @[Core.scala 203:32]
      else : @[Core.scala 205:81]
        node _T_27 = bits(io.ROM_Data, 15, 11) @[Core.scala 205:28]
        node _T_28 = eq(_T_27, UInt<5>("h016")) @[Core.scala 205:37]
        node _T_29 = eq(PreDecode, UInt<1>("h01")) @[Core.scala 205:71]
        node _T_30 = and(_T_28, _T_29) @[Core.scala 205:58]
        when _T_30 : @[Core.scala 205:81]
          IO_Rd_i <= UInt<1>("h01") @[Core.scala 206:15]
          skip @[Core.scala 205:81]
        else : @[Core.scala 207:17]
          Reg_Rd <= UInt<1>("h01") @[Core.scala 208:14]
          skip @[Core.scala 207:17]
    inst alu of Alu @[Core.scala 211:21]
    alu.clock <= clock
    alu.reset <= reset
    alu.io.ROM_Data <= io.ROM_Data @[Core.scala 212:21]
    alu.io.ROM_Pattern <= Bit_Pattern @[Core.scala 213:24]
    alu.io.A <= io.IO_WData @[Core.scala 214:14]
    alu.io.B <= Op_Mux @[Core.scala 215:14]
    Q <= alu.io.Q @[Core.scala 216:7]
    alu.io.SREG <= SREG_i @[Core.scala 217:17]
    alu.io.PassB <= PassB @[Core.scala 218:18]
    alu.io.Skip <= Inst_Skip @[Core.scala 219:17]
    Do_Other <= alu.io.Do_Other @[Core.scala 220:14]
    Z_Skip <= alu.io.Z_Skip @[Core.scala 221:12]
    Status_D <= alu.io.Status_D @[Core.scala 222:14]
    Status_Wr <= alu.io.Status_Wr @[Core.scala 223:15]
    inst mf8_pc of Pcs @[Core.scala 225:24]
    mf8_pc.clock <= clock
    mf8_pc.reset <= reset
    mf8_pc.io.Offs_In <= Offset @[Core.scala 226:23]
    mf8_pc.io.Pause <= PCPause @[Core.scala 227:21]
    mf8_pc.io.RJmp <= RJmp @[Core.scala 228:20]
    NPC <= mf8_pc.io.NPC @[Core.scala 229:9]
    PC <= mf8_pc.io.PC @[Core.scala 230:8]
    inst pr of Reg @[Core.scala 232:20]
    pr.clock <= clock
    pr.reset <= reset
    pr.io.Wr <= Reg_Wr @[Core.scala 233:14]
    node _pr_io_Rd_Addr_T = bits(Rd_Addr, 4, 0) @[Core.scala 234:29]
    pr.io.Rd_Addr <= _pr_io_Rd_Addr_T @[Core.scala 234:19]
    node _pr_io_Rr_Addr_T = bits(Rr_Addr, 4, 0) @[Core.scala 235:29]
    pr.io.Rr_Addr <= _pr_io_Rr_Addr_T @[Core.scala 235:19]
    pr.io.Data_In <= Wr_Data @[Core.scala 236:19]
    io.IO_WData <= pr.io.Rd_Data @[Core.scala 237:17]
    Rr_Data <= pr.io.Rr_Data @[Core.scala 238:13]
    Z <= pr.io.Z @[Core.scala 239:7]
    
